doctype html
html(lang="fr" ng-app="paperwork")
    head
        meta(charset="UTF-8")
        meta(http-equiv="X-UA-Compatible" content="IE=edge")
        meta(content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" name="viewport")
        link(href="/assets/css/bootstrap.min.css" rel="stylesheet")
        link(href="/assets/css/font-awesome/css/font-awesome.min.css" rel="stylesheet")
        link(href="/assets/css/Ionicons/css/ionicons.min.css" rel="stylesheet")
        link(href="/assets/css/AdminLTE.min.css" rel="stylesheet")
        link(href="/assets/css/_all-skins.min.css" rel="stylesheet")
        link(href="/assets/css/morris.css" rel="stylesheet")
        link(href="/assets/css/jquery-jvectormap.css" rel="stylesheet")
        link(href="/assets/css/bootstrap3-wysihtml5.min.css" rel="stylesheet")
        link(href="/assets/css/site.css" rel="stylesheet")
        title EasyUML|Plan de travail
    body(class="skin-purple sidebar-mini")
        div(class="wrapper" ng-controller = "paperworkController as paperwork")
            header(class="main-header")
                a(href="#" class="logo")
                    span(class="logo-mini")
                        b E
                        small uml
                    span(class="logo-lg")
                        b Easy
                        |UML
                nav(class="navbar navbar-static-top")
                    a(href="#" class="sidebar-toggle" data-toggle="push-menu" role="button")
                        span(class="sr-only") Toggle navigation
                    div(class="navbar-custom-menu")
                        ul(class="nav navbar-nav")
                            li(class="dropdown user user-menu")
            aside(class="main-sidebar")
                section(class="sidebar")
                    ul(class="sidebar-menu" data-widget="tree")
                        li(class="header") OUTILS
                        li
                            a(href="#" ng-click="paperwork.addclass($event)")
                                i(class="fa fa-th-large") 
                                span Nouvelle classe
                        li
                            a(href="#" id="newlink" ng-click="paperwork.addlink($event)")
                                i(class="fa fa-th-large")
                                span Nouvelle relation

            div(class="content-wrapper")
                section.content-header
                    h1 Plan de travail
                section.content()
                    div#holder(class="petitcarreau")
                    div.row(style="margin-top:20px;")
                        form(ng-submit="paperwork.save($event)")
                            button(class="btn btn-primary btn-flat center-block" value=newdia ) Enregistrer
            footer(class="main-footer")
                div(class="pull-right hidden-xs")
                    b Version
                    span  1.0.0
                strong Copyright &copy; EasyUML. 
                |All rights reserved.
        div(class="control-sidebar-bg")
        script(src="/assets/js/jquery.min.js")
        script(src="/assets/js/jquery-ui.min.js")
        script(src="/assets/js/bootstrap.min.js")
        script(src="/assets/js/raphael.min.js")
        script(src="/assets/js/morris.min.js")
        script(src="/assets/js/jquery.sparkline.min.js")
        script(src="/assets/js/jquery-jvectormap.js")
        script(src="/assets/js/fastclick.js")
        script(src="/assets/js/adminlte.min.js")
        script(src="/assets/js/bootstrap3-wysihtml5.all.min.js")
        script(src="/assets/js/site.js")
        script(src="/assets/js/angular.js")
        script(src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/3.10.1/lodash.js")
        script(src="https://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.3.3/backbone.js")
        script(src="https://cdnjs.cloudflare.com/ajax/libs/jointjs/2.1.0/joint.js")
        script(type="text/javascript").
            angular.module('paperwork',[]).controller('paperworkController',function($scope,$http){
                
                var startlink = "no";
                var endlink = "no";
                var linkflag = false;

                var graph = new joint.dia.Graph;
                var paper = new joint.dia.Paper({
                    el: document.getElementById('holder'),
                    model: graph,
                    width: document.getElementById('holder').width,
                    height: 600,
                    gridSize: 1,
                    clickThreshold: 1 
                });

                paper.on('cell:pointerdown',function(cellView){
                    if(linkflag){
                        if(startlink == "no"){
                            startlink = cellView.model;
                        }
                        else{
                            endlink = cellView.model;
                            var link = new joint.shapes.standard.Link();
                            link.source(startlink);
                            link.target(endlink);
                            link.addTo(graph);
                            linkflag = false;
                            document.getElementById("newlink").style="";
                            startlink = "no";
                            endlink = "no";

                        }

                    }

                });
                    
                paper.on('cell:pointerdblclick', function(cellView) {
                        var obj = cellView.$box;
                        obj.find(".class-name input").focus();
                });

                paper.on('blank:pointerclick', function() {
                        $("input").blur();
                });

                joint.shapes.html = {};
                joint.shapes.html.Element = joint.shapes.basic.Rect.extend({
                    defaults: joint.util.deepSupplement({
                        type: 'html.Element',
                        attrs: {
                            rect: { stroke: 'none', 'fill-opacity': 0 }
                        }
                    }, joint.shapes.basic.Rect.prototype.defaults)
                });

                joint.shapes.html.ElementView = joint.dia.ElementView.extend({
                    template:[
                        '<div class="class-box container">',
                            '<div class="row class-name"><input style="margin:auto;"" class="item1" type="text" value="classname" /></div>',
                            '<div class="row class-item"><input class="item2" type="text"/></div>',
                            '<div class="row class-item"><input class="item3" type="text"/></div>',
                        '</div>'
                    ].join(''),

                    initialize: function(){
                        _.bindAll(this, 'updateBox');
                        joint.dia.ElementView.prototype.initialize.apply(this, arguments);
                        this.$box = $(_.template(this.template)());

                        this.$box.find('.item1').on('change', _.bind(function(evt) {
                            this.model.set('item1', $(evt.target).val());
                        }, this));

                        this.$box.find('.item2').on('change', _.bind(function(evt) {
                            this.model.set('item2', $(evt.target).val());
                        }, this));

                        this.$box.find('.item3').on('change', _.bind(function(evt) {
                            this.model.set('item3', $(evt.target).val());
                        }, this));
                        this.$box.find('.class-name').on('dblclick',function(evt){
                            $(this).find('input').focus();
                        })
                        this.model.on('change', this.updateBox, this);
                        this.updateBox();
                        this.model.on('remove', this.removeBox, this);
                    },

                     removeBox: function(evt) {
                        this.$box.remove();
                    },

                    render:function(){
                        joint.dia.ElementView.prototype.render.apply(this, arguments);
                        this.paper.$el.prepend(this.$box);
                        this.updateBox();
                        return this;
                    },

                    updateBox: function() {
                        var bbox = this.model.getBBox();
                        this.$box.find('.item1').val(this.model.get('item1'));
                        this.$box.css({
                            width: bbox.width,
                            height: bbox.height,
                            left: bbox.x,
                            top: bbox.y,
                            transform: 'rotate(' + (this.model.get('angle') || 0) + 'deg)'
                        });
                    },
                });

                var paperwork = this;
                paperwork.save=function($event){
                    newdia = $event.target.lastChild.value;
                    var name="";
                    if(newdia == -1){
                        name = prompt("Entrez le nom de votre de diagramme");
                        $event.target.lastChild.value = 0;
                    }
                    var jsonobject = graph.toJSON();
                    var jsonstring = JSON.stringify(jsonobject);
                    //- console.log(jsonstring);
                    $http({
                        method:"POST",
                        data:{"data":jsonstring,"newdia":newdia,"name":name},
                        url:"/save"
                    }).then(function mySuccess(response){
                            console.log(response);
                            alert("Sauvegarde r√©ussie");
                        }, function myError(response) {
                            console.log(response);
                    });
                };

                paperwork.addclass=function($event){
                    $event.preventDefault();
                    var el1 = new joint.shapes.html.Element({
                        position: { x: 80, y: 80 },
                        size: { width: 170, height: 100 },
                        item1:"classname",
                    });

                    graph.addCells([el1]);
                    //- console.log(graph);

                };

                paperwork.addlink=function($event){
                    if(linkflag){
                        linkflag != linkflag;
                        $event.currentTarget.style = "";
                    }
                    else{
                        $event.currentTarget.style = "color:#605ca8;";
                        linkflag = true;
                    }

                };


                var data =!{data};
                if(data != -1){
                    data = JSON.parse(data);
                    done = [];
                    for(var j = 0; j!=data.cells.length; j++){
                        cell = data.cells[j];
                        if(cell.type == "standard.Link"){
                            var link = new joint.shapes.standard.Link();
                            var source = cell.source.id;
                            var target = cell.target.id;
                            var sourceflag = false;
                            var targetflag = false;
                            for(i=0;i!=done.length;i++){
                                if(done[i].id == source){
                                    sourceflag = true;
                                    source = done[i];
                                }
                                if(done[i].id == target){
                                    targetflag = true;
                                    target = done[i];
                                }
                            }
                            if(sourceflag){
                                link.source(source);
                            }else{
                                var el1 = new joint.shapes.html.Element({
                                    id: source,
                                    position: data.cells.find(function(element){
                                        if(element.id == source)
                                        return element;
                                    }).position,

                                    size: data.cells.find(function(element){
                                        if(element.id == source)
                                        return element;
                                    }).size,

                                    item1:data.cells.find(function(element){
                                        if(element.id == source)
                                        return element;
                                    }).item1,
                                });
                                graph.addCells([el1]);
                                link.source(el1);
                                done.push(el1);
                            }

                            if(targetflag){
                                link.target(target);
                            }else{
                                var el2 = new joint.shapes.html.Element({
                                    id:target,
                                    position: data.cells.find(function(element){
                                        if(element.id == target)
                                        return element;
                                    }).position,

                                    size: data.cells.find(function(element){
                                        if(element.id == target)
                                        return element;
                                    }).size,

                                    item1:data.cells.find(function(element){
                                        if(element.id == target)
                                        return element;
                                    }).item1,
                                });
                                graph.addCells([el2]);
                                link.target(el2);
                                done.push(el2);
                            }
                            link.addTo(graph);
                        }
                        
                    }

                }
            });


